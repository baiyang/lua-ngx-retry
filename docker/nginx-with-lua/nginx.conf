
user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    lua_package_path "/etc/nginx/lua-ngx-retry/?.lua;;";  # 指定自定义lua脚本

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    gzip  on;

    include /etc/nginx/conf.d/*.conf;

    upstream test-server {
        server test-server:8080 max_fails=0 fail_timeout=5m;
        keepalive 10;
    }

    server {
        listen       80;
        listen 443 ssl http2;
        server_name  _;
        include https.conf;


        client_max_body_size 0;
        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
        }


        location = /auth/authenticate {
            internal;
            proxy_pass http://test-server/auth;
        }

        location /test/ {
                # to allow streaming response
                proxy_buffering off;
                lua_check_client_abort on;

                content_by_lua_block {
                    local retry_handler = require("retry_on_request_error")
                    retry_handler.handle_api_with_retry({})
                }
        }
        location /test-with-auth-request/ {
                include auth.conf;

                # to allow streaming response
                proxy_buffering off;
                lua_check_client_abort on;

                content_by_lua_block {
                    local retry_handler = require("retry_on_request_error")
                    retry_handler.handle_api_with_retry({})
                }
        }

    }

}